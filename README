
= todo
   - install dependencies in the install script
      - do this for ubuntu
         - apt: gcc, g++, pip,
         - fzf
   - do this in install script
      - clone sixcircuit/spaceship-prompt into xnix/shell/zsh/spaceship-prompt
      ? maybe just do a static include here. it never changes.
   - make sure <shift + space> is mapped to the <page up> control sequence in your terminal emulator


this setup no longer supports vim. i've standardized on neovim. vim support stops somewhere in the commit history. if you want it, it's in there somewhere.


= run the install script (it works now!)

   - `cd ~ && clone <dotfiles_repo_url.git> && ./term && ./term/bin/install`
   - link ~/plat to whatever platform you're using eg. for macos: (ln -s ~/Dropbox/systems/macos ~/plat)
   - link ~/term/local to whatever local (secret) file set you're using eg. (ln -s ~/Dropbox/systems/local ~/term/local)
   - copy /root files into the right places
   - check /settings for various other program settings you have to install manually

= any platform

   = add ~/.prompt with three lines
      - first line is a number [16, 255] inclusive the 256 term color you want to use for the user color in the prompt.
      - second line is a number [16, 255] inclusive the 256 term color you want to use for the host color in the prompt.
      - third line is a number [16, 255] inclusive the 256 term color you want to use for the "@" character color between the user and host in the prompt.

   - make sure you have gcc installed: apt-get install gcc g++
   - make sure you have pip3 installed: apt-get install pip

   = install fzf
      - git clone --depth 1 https://github.com/junegunn/fzf.git ~/.fzf
      - ~/.fzf/install --bin


   = install neovim
      - install nvim into ~/plat/nvim and link the bin into ~/plat/bin/nvim
      = install vim-plug for vim and nvim
         - `sh -c 'curl -fLo "${XDG_DATA_HOME:-$HOME/.local/share}"/nvim/site/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'`
      = then install plugins from your lockfile
         - check out the plugin lockfiles for nvim in xvim/lockfiles/*
         - create them with :PlugSnapshot ~/term/xvim/lockfiles/plug.lockfile.<date>
         - to restore plugins from a previously generated lockfile run this in your shell:
            `nvim -S ~/term/xvim/lockfiles/plug.lockfile.<date>
         - or within vim:
            `:source ~/term/xvim/lockfiles/plug.lockfile.<date>`
         - if you just want to install whatever the newest versions are:
            - run :PlugInstall
      = https://github.com/neovim/pynvim
         . run: pip3 install pynvim
         - run :MUndoShow in neovim
         - run :checkhealth in neovim

   = install nvm
      - install nvm without touching the existing dotfiles. example here (update the version number):
      - PROFILE=/dev/null bash -c 'curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.5/install.sh | bash'
      - nvm install -lts
      - nvm alias default <new-version>
         - if you automate this, don't parse "ls" use this:
         for f in "$HOME/.nvm/versions/node/*" do
             [ -e "$f" ] || [ -L "$f" ] || continue
             // do something.
             echo "$f"
         done


   = setup colorterm env variable
      . https://github.com/termstandard/colors
      . These issues can be ameliorated by adding COLORTERM to:
      . the SendEnv list in /etc/ssh/ssh_config on ssh clients;
      . the AcceptEnv list in /etc/ssh/sshd_config on ssh servers; and
      . the env_keep list in /etc/sudoers.

= macos

   = install monego font
      - install regular and italic
      - don't install bold. it's too bold. iterm (or macos) bolds the regular font just enough. maybe one day fontforge a real bold version but for now it's good enough.

   = keyboard shortcuts
      ! turn off all the regular keyboard shortcuts in macos settings
         = only keep
            - screen shot as cmd+ctrl+s
            - finder as cmd+space
      - 1password (setup in one password) as cmd+ctrl+f

   = install ports (in userspace)
      - download macports and update version number in bin/install_ports.sh and then `bash bin/install_ports.sh`
      - install coreutils (we use gls)
      - install ripgrep
      - install tmux
      - install reattach-to-user-namespace with macports (tmux-pasteboard) or brew (reaattach-to-user-namespace?)
      - install rsync (then ln -s ~/.macports/bin/rsync ~/plat/bin/rsync3)
      - install ports on existing computer (list with "ports installed")

   - link any platform specific bin into ~/plat/bin

   = dropbox setup on new computer
      - setup dropbox (let it create the dropbox folder, this is key)
      - pause dropbox sync
      - copy files into the dropbox folder (that it created)
      - restart sync (it should index, instead of uploading or downloading files)
      - if you fuck this up, it'll create a bazillon conflicted copies so watch it for a little bit after you restart it.

   = setup key repeats - these are the right values
   ```
      defaults read -g KeyRepeat
      defaults read -g InitialKeyRepeat
      defaults write -g KeyRepeat -int 1 # normal minimum is 2 (30 ms)
      defaults write -g InitialKeyRepeat -int 15 # normal minimum is 15 (225 ms)
      defaults read -g KeyRepeat
      defaults read -g InitialKeyRepeat
   ```


= old stuff

   = local brew install
      `mkdir homebrew && curl -L https://github.com/Homebrew/brew/tarball/master | tar xz --strip 1 -C homebrew`

   = local rvm install with
      `brew install ruby@2.6`
      `rvm mount ~/.homebrew/Cellar/ruby@2.6/2.6.9 -n ruby-2.6.9`
      `rvm alias create default ext-ruby-2.6.9`

