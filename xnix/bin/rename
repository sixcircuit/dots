#!/usr/bin/env node

const fs = require('fs');
const readline = require('readline');

const setup = function(){

   const args = process.argv.slice(2);

   const options = {
      no_act: false,
      force: false,
      eval: null,
      regex: null,
      assume_yes: false
   };

   while(args.length > 0){
      const arg = args.shift();
      if(arg === '-n' || arg === '--no-act'){ options.no_act = true; }
      else if(arg === '-f' || arg === '--force'){ options.force = true; }
      else if(arg === '-y' || arg === '--yes'){ options.assume_yes = true; }
      else if(arg === '-e'){ options.eval = args.shift(); }
      else if(arg === '-r'){
         const match = args.shift();
         const replace = args.shift();
         if(!match || replace === undefined){
            console.log("error: -r requires two arguments: <pattern> <replacement>");
            process.exit(1);
         }
         options.regex = { match, replace };
      }
      else if(arg.startsWith('-')){
         console.log(`unknown option: ${arg}`);
         process.exit(1);
      }else{
         args.unshift(arg);
         break;
      }
   }

   return({ options, paths: args });
};

const { options, paths } = setup();

// YOU GOT TO HERE!!!!!

if(!options.eval && !options.regex){
   console.log(`usage: rename [-n] [-f] [-y] (-e <js_eval> (eg: "name = name.toLowerCase()") | -r <pattern> <replacement>) [files...]`);
   process.exit(1);
}

function transform_name(name){
   if(options.eval){
      try{
         const f = (new Function(`return (function(name){ ${ options.eval } return(name); })`))();
         name = f(name);
      }catch(err){
         console.log(`error in eval: ${err.message}`);
         process.exit(1);
      }
   }else if(options.regex){
      try{
         const re = new RegExp(options.regex.match);
         name = name.replace(re, options.regex.replace);
      }catch(err){
         console.log(`error in regex: ${err.message}`);
         process.exit(1);
      }
   }
   return(name);
}

function rename_files(file_list){
   const rename_plan = [];

   for(const original of file_list){
      const target = transform_name(original);
      if(target === original){ continue; }
      rename_plan.push({ from: original, to: target });
   }

   if(rename_plan.length === 0){ console.log("no changes to apply."); return; }

   console.log("planned renames:");

   for(const { from, to } of rename_plan){
      console.log(`${from} -> ${to}`);
   }

   if(options.no_act){ return; }

   if(options.assume_yes){ apply_renames(rename_plan); }
   else{
      const rl = readline.createInterface({ input: process.stdin, output: process.stdout });
      rl.question("proceed with renaming? (y/N) ", function(answer){
         rl.close();
         if(answer.trim().toLowerCase() === 'y'){
            apply_renames(rename_plan);
         }else{ console.log("aborted."); }
      });
   }
}

function apply_renames(rename_plan){
   for(const { from, to } of rename_plan){
      if(fs.existsSync(to) && !options.force){
         console.warn(`${from} not renamed: ${to} already exists`);
         continue;
      }

      try {
         fs.renameSync(from, to);
         console.log(`${from} renamed as ${to}`);
      }catch (err){
         console.warn(`can't rename ${from} to ${to}: ${err.message}`);
      }
   }
}

if(paths.length > 0){ rename_files(paths); }
else{
   console.log('reading paths from STDIN...');

   const rl = readline.createInterface({
      input: process.stdin,
      terminal: false
   });

   const input_files = [];

   rl.on('line', function(line){
      const trimmed = line.trim();
      if(trimmed){ input_files.push(trimmed); }
   });

   rl.on('close', function(){ rename_files(input_files) });
}
