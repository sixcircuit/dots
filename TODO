

= todo

   - eventually reenable ii, aa, ee (drop a for blocks, just use i / io)

   - setup ai.cli to take a visual block so you can highlight text and pass it to the llm with
   - "this is the relevant portion: ```<text>```" and start the insert above it.

= later

   - keep in mind: you can make all the insert motions repeatable
      / like f and t but i don't think you need to for right now.

   - try to make arg manipulation commands dot repeatable.

   - figure out macros, i don't love what i'm doing now but it works ok
   - try (true-zen or zenmode) and twilight
      - https://github.com/pocco81/true-zen.nvim?tab=readme-ov-file
      - https://github.com/folke/zen-mode.nvim
      - https://github.com/folke/twilight.nvim


= whisper
   - Add whisper eo the llm (and nvim! Make an nvim plugin if it doesn't exist.) -- verbal
   - add verbal to nvim. I would love a command line buffer kind of thing. Where I pick a piece of code and then hit a button and get a new buffer with a prompt and then I could just use the verbal hotkey to say some shit. Do this. Have it read and write into a new vsplit buffer in nvim. Can you switch existing buffer to raw or something and have an update as it writes. Or, could you write a real plug-in that streams into the buffer while it's running, and it could just replace the previous output as it goes. Use gpt4 to write it.  https://www.reddit.com/r/vim/s/9IqBVvcHuD

= ai
   - use terminal in vim to do ai. open a split and use it. or save what was there and restore it when you're done.
   - produce a file to read of the output (without color). ai llm --out file.txt --fzf
   - wait till "ai" is done, then close it out read the file and import the response


= review commands
   - completion (rename, gd go to definition)

= longterm
   - you have a onetab list called "improvements" in chrome.
      - work them. there's some good stuff in there.
   - move to buffers over tabs? watch a video.
   - look into this: https://github.com/svermeulen/vim-easyclip
   - move tabline to lightline and get rid of tabline
   - maybe write your own tabout. tabout seems shitty
   - hack support into command-t lua for:
      . it doesn't show you the matches anymore.
      - exe "hi! CommandTCharMatched" .s:fmt_bold .s:fg_orange .s:bg_none
   - look into these other options for moving and selecting tree sitter nodes / objects
      . https://www.reddit.com/r/neovim/comments/r10llx/the_most_amazing_builtin_feature_nobody_ever/?share_id=oWRt1U8TO-CXlmQ-JF4rk&utm_content=1&utm_medium=android_app&utm_name=androidcss&utm_source=share&utm_term=1

= vim

   = figure out code completion
      x setup cmp, lsp, mason
      x "google best code completion neovim"
      - try ctrl+space completion instead of tab?
      - turn off complete for plain text files? like notes? it's weird.
      / turn off complete for vim command line ":"

   - do a lockfile! (https://shyr.io/blog/vim-plugin-lockfile)
      - create (in vim): PlugSnapshot ~/.dotfiles/Vim/plug.snapshot
      - restore (from shell): vim -S ~/.dotfiles/Vim/plug.snapshot

= shell
   - blow away the old dotfiles repo. force push over the old github. save the old one locally in an archive (you need to figure out archiving old projects anyway).
   - finish fixing the zsh config and (maybe) the bash config. i don't know if it's short circuited
   - change the name of the master branch to main

= /dropbox/system
   - figure this out. copy plat and term and local
   - clean up and remove /dropbox/system.old


= done

   x setup fzf
      x fix up the keybinding code in your own files.

   x fix ls
      / move to eza
         x nope! coreutils ls is the best.
      x alias everything
      x fix colors
         x especially weird background color
      x drop lscolors
      x fix ls_colors

x vim
   x fix the backspace issue in command-t and fix up the styling and options!
   x fix tree sitter (i think this is fixed)
   x open treesitter on a dry include bundle and see what happens.
      x you want treesitter. it's way faster. "G" to the bottom and see how slow regex is
   x fix autopairs. it sucks because it adds a " even if the next character is a letter.
      x try delimitmate again

   x https://github.com/haya14busa/vim-asterisk (set z star as default)

   x Do this too. See if you like it. Turn it on for z star.
      x https://github.com/haya14busa/is.vim

   x https://github.com/haya14busa/vim-operator-flashy
      . replaced by an autocmd

   x setup search
      x ? does :Rg (Make sure this works well, open a new tab before running Rg, check the jumplist, setup keys to move through the jumplist)
      x / Does fuzzy
      x ? Does regular /

   x fuzzy find
      x https://github.com/ggvgc/vim-fuzzysearch
      x https://vi.stackexchange.com/questions/14465/fuzzy-find-within-buffer
      x incsearch plugin is no longer necessary. It's in main vim/nvim. Just use this one and drop the other two

   x maybe this, i feel like it would be slow for very large buffers. so maybe skip it. https://github.com/osyo-manga/vim-anzu (don't need it, built into neovim)

   x replace easymotion
      x remove easymotion
      x remove easymotion files
      x setup hop
         x setup commands
            x setup paste anywhere command
            x setup command to delete inside and paste something
         x setup colors
      x setup fuzzy incremental search that sets up the hop list
         x maybe fix pounce?
         x maybe you don't need fuzzy search because it works?
      / setup pounce
         / setup commands
         / setup colors

   x manage hover with
      x make it auto hover hover. and then you can "q" out
      x https://vi.stackexchange.com/questions/37225/how-do-i-close-a-hovered-window-with-lsp-information-escape-does-not-work
      x vim.lsp.buf.hover

   x setup lsp
      x learn the commands. use them. gd (go to declaration)

   x learn wordmotions
   x look for automatic setup of all your plugins. doing it by hand is a pain.
   x fix all the weird ruby / python dependencies once and for all (if you can).

   x setup spelling
      . cspell sucks because it doesn't integrate with the native spelling dictionary
      - figured out how to setup native spelling support for treesitter

   x fix showTrailingWhitespace
      / doesn't show up in both buffers if they're both on the same vsplit.
      / at least not reliably. don't know what's going on.
      x replaced it with listchars.

   x finish colors
      x fix colors -- just strip out js and solarized stuff and make one big color.vim
      x basically redo the core bundle stuff. look for faster / better code highlighting
      x write scripts to copy groups
         x syntax, tree sitter, lsp
      x strip out solarized
      x just put everything in colors.vim / colors.lua
         / maybe break it out into a directory
            - import common everywhere.
            - /colors/common.lua
            - /colors/javascript.lua
            - /colors/hop.lua
            - /colors/pounce.lua
         x drop old javascript highlighting
      x add support for gui 24bit colors
         . should be easy, just pull the hex and use it.
   x setup colorizer
      x https://github.com/norcalli/nvim-colorizer.lua

   x colors are coming along. keep working on it.

x setup tux
   x run through tux todos.

   x setup zsh completion for tux
      x setup code is in a chatgpt session

   x alias this stuff
      / fzf tux init
      / fzf tux ls (can you show a description but only search and pull out the first string?)

= 2025-04-11 20:42

? can you use dot after operator pending mode move? nope.

= 2025-04-12 22:22

   x override j and k and have them all be hops.
      . this was in fact, insane.
      x my intuition is that you always move more than one line
      x see if this is insane.
      x remap the letters you use per function
         x k is always 1 up for k
         x j is always 1 up for j

   x change i to ii

   x map <leader> i<blah> to just i<blah>

   x change x to cx unmap x. map q to ? unmap q. keep a list of what you use.

   x add descriptions to all your keymaps. (longer term) (use ai for the weird ones)

   x write do_inside_quotes with quote starts

= 2025-04-14 21:24
   - OVERNIGHT NOTES - 2025-04-12 23:17

   you're doing so great.

   this is cleaning up really nicely
   i think the new mappings and symmetries are really going to help you move faster
   and i think they'll help you remember more and use better motions and do annoying things faster.

   x start using ma<space> instead of insert. -- set insert to "iii" make it annoying.
   x actually set ma<space> to <leader><i> that's how often i think you'll use it

   / vim: change r to c. cr or cc and map cc to cl unmap r.

   x also don't forget about sip siq sib sia (adding spaces around the inside. it's so good.)


   x vim: finish fixing hop commands. SIMPLIFY
   x vim: can you count the number of whatever you're looking for and then send keys so you can use . instead of hop?
      - use "cmf<char>" -- it'll only work on one line
      - use "cmt<char>" -- it'll only work on one line
   x do cm(b,a,p,q) change move inside
   x do mp(b,a,p,q) move paste inside
   x do mps(b,a,p,q) move paste start parens <here>()
   x do mpe(b,a,p,q) move paste end paren ()<here>
   x do my(b,a,p,q) move yank inside
   x do myc = move yank to char
   x do mpc = move paste at char
   x have all quotes be quote starts

   x change single letter moves to mta mtp mtb (move to...)
   x then use "p" for paste.
   x then use "a" for append.
   x because with all the other good moves (append, change, etc, you don't really need just a move.)
   x setup "mi<blah>" move insert somewhere. it's so good.
      - mi <all the basic moves>
      - mit <char> -- probably less useful than bpaq and space and ,;:-=
      - mi<space> so good!

x vim

   x write some code with new colors.
   x remove old references to colors (original.vim)
   x move new colors to kendrick.lua

   x setup snippets
      x remove ultisnip
      x look into snippet plugins (luasnip)
      x setup luasnip (implement old ultisnip snippets)

   x try uppercase highlights. see what else is available
   x vim make H and L move to start and end of the line.

   standout = false,
   underline = false,
   undercurl = false,
   sp defines the color of the underline/undercurl effect, not the text itself.

   - OVERNIGHT NOTES - 2025-04-15 00:40

   . ok, you're still doing great.
   . you should be proud of this
   . soooo many great mappings.

   . you need to wrap this up tomorrow.
   . you have all the pieces, just finish it up
   . you have all the pieces to make changes going forward if you don't like something
   . at this point you're going to learn a lot more by using what you built and then circling back

   . love you!


   x you need to write all the insert motions.
      x i<whatever> work on the whole line
      x mi<whatever> these work on the whole page.
      x there should be total symmetry
      x ii} i} im<char>
      x see how good the matching bracket highlighting is.
      x it's ok, decide about the offsets on brackets.
      x i think not iq and iiq matching in comments is weird
         x (maybe drop treesitter and just match individuals)
         x try it and try highlighting all of them with an offset letter like brackets and see what you think

   x you need to write all the change and tf motions.

   x cut new plugin snapshot
   x get rid of goyo


   x match all commands that are e<> i<> c<> etc that use move on one line to also have
      x mi<> me<> mc<> and those are global moves instead of 1 line

   x remove any aa and ii mappings you want to be able to reenabble them in the future.
      x but don't reenabble them now.

   x write ,ca(b, p), ,cb(a, p), ,cp(a, b)
      x change from one surround to another
      x just write these by hand, there aren't that many permutations

   x vim: add linewise fallback ,aph etc.


